/*
 * UICalcularEstadistica.java
 *
 * Created on 3 de septiembre de 2006, 23:05
 */

package ArchivoHash.gui;
import javax.swing.JOptionPane;
/** La clase <code>UICalcularEstadistica</code> es la encargada de mostrar
 * y obtener los datos para generar un nuevo informe estad√≠stico
 *
 * @author  Intel
 */
public class UICalcularEstadistica extends javax.swing.JFrame {
    private Principal ventanaPrincipal;
    
    /** Crea una ventana para calcular estadistica */
    public UICalcularEstadistica(Principal p) {
        initComponents();
        ventanaPrincipal = p;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        grupoModo = new javax.swing.ButtonGroup();
        grupoRepeticion = new javax.swing.ButtonGroup();
        grupoElementos = new javax.swing.ButtonGroup();
        panelModo = new javax.swing.JPanel();
        radioOrdenado = new javax.swing.JRadioButton();
        radioOrdenadoInv = new javax.swing.JRadioButton();
        radioAleatorio = new javax.swing.JRadioButton();
        panelAlgoritmos = new javax.swing.JPanel();
        checkSeleccion = new javax.swing.JCheckBox();
        checkBurbuja = new javax.swing.JCheckBox();
        checkInsercion = new javax.swing.JCheckBox();
        checkComb = new javax.swing.JCheckBox();
        checkShell = new javax.swing.JCheckBox();
        checkHeap = new javax.swing.JCheckBox();
        checkQuick = new javax.swing.JCheckBox();
        panelRepeticion = new javax.swing.JPanel();
        radioSinRepeticion = new javax.swing.JRadioButton();
        radioConRepeticion = new javax.swing.JRadioButton();
        panelElementos = new javax.swing.JPanel();
        radioEnteros = new javax.swing.JRadioButton();
        radioObjetos = new javax.swing.JRadioButton();
        labelCantidad = new javax.swing.JLabel();
        spinnerCantElementos = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(1,1,1000000,1));
        botonCalcular = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Calcular Estadistica");
        getContentPane().setLayout(new java.awt.FlowLayout());

        panelModo.setBorder(javax.swing.BorderFactory.createTitledBorder("Modo de Ordenamiento"));
        panelModo.setMinimumSize(new java.awt.Dimension(50, 50));
        panelModo.setOpaque(false);
        panelModo.setPreferredSize(new java.awt.Dimension(160, 120));
        panelModo.setLayout(new java.awt.GridLayout(3, 0));

        grupoModo.add(radioOrdenado);
        radioOrdenado.setText("Ordenado");
        panelModo.add(radioOrdenado);

        grupoModo.add(radioOrdenadoInv);
        radioOrdenadoInv.setText("Ordenado inversamente");
        panelModo.add(radioOrdenadoInv);

        grupoModo.add(radioAleatorio);
        radioAleatorio.setSelected(true);
        radioAleatorio.setText("Aleatorio");
        panelModo.add(radioAleatorio);

        getContentPane().add(panelModo);

        panelAlgoritmos.setBorder(javax.swing.BorderFactory.createTitledBorder("Algoritmos de Ordenamiento"));
        panelAlgoritmos.setPreferredSize(new java.awt.Dimension(200, 150));
        panelAlgoritmos.setLayout(new java.awt.GridLayout(4, 2));

        checkSeleccion.setText("Seleccion");
        panelAlgoritmos.add(checkSeleccion);

        checkBurbuja.setText("Burbuja");
        panelAlgoritmos.add(checkBurbuja);

        checkInsercion.setText("Insercion");
        panelAlgoritmos.add(checkInsercion);

        checkComb.setText("CombSort");
        panelAlgoritmos.add(checkComb);

        checkShell.setText("ShellSort");
        panelAlgoritmos.add(checkShell);

        checkHeap.setText("HeapSort");
        panelAlgoritmos.add(checkHeap);

        checkQuick.setText("QuickSort");
        panelAlgoritmos.add(checkQuick);

        getContentPane().add(panelAlgoritmos);

        panelRepeticion.setBorder(javax.swing.BorderFactory.createTitledBorder("Repeticion"));
        panelRepeticion.setLayout(new java.awt.GridLayout(2, 0));

        grupoRepeticion.add(radioSinRepeticion);
        radioSinRepeticion.setSelected(true);
        radioSinRepeticion.setText("Sin repeticion");
        panelRepeticion.add(radioSinRepeticion);

        grupoRepeticion.add(radioConRepeticion);
        radioConRepeticion.setText("Con repeticion");
        panelRepeticion.add(radioConRepeticion);

        getContentPane().add(panelRepeticion);

        panelElementos.setBorder(javax.swing.BorderFactory.createTitledBorder("Elementos"));
        panelElementos.setLayout(new java.awt.GridLayout(2, 1));

        grupoElementos.add(radioEnteros);
        radioEnteros.setSelected(true);
        radioEnteros.setText("Enteros");
        panelElementos.add(radioEnteros);

        grupoElementos.add(radioObjetos);
        radioObjetos.setText("Objetos");
        panelElementos.add(radioObjetos);

        getContentPane().add(panelElementos);

        labelCantidad.setText("Cantidad de Elementos:");
        getContentPane().add(labelCantidad);

        spinnerCantElementos.setMinimumSize(new java.awt.Dimension(60, 18));
        spinnerCantElementos.setOpaque(false);
        spinnerCantElementos.setPreferredSize(new java.awt.Dimension(60, 18));
        getContentPane().add(spinnerCantElementos);

        botonCalcular.setText("Calcular");
        botonCalcular.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonCalcularActionPerformed(evt);
            }
        });
        getContentPane().add(botonCalcular);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Realiza las operaciones necesarias para generar el informe*/
    private void botonCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCalcularActionPerformed
        boolean[] seleccionMetodos = new boolean[7];

        //Selecciona el modo
        int auxModo;
        if(radioOrdenado.isSelected())auxModo=GestorCalcularEstadistica.ORDENADO;
        else if(radioOrdenadoInv.isSelected())auxModo=GestorCalcularEstadistica.INV_ORDENADO;
        else auxModo=GestorCalcularEstadistica.ALEATORIO;
        
        //Inicializa variables auxiliares para llamar al constructor
        int auxInt = Integer.parseInt(spinnerCantElementos.getValue().toString());        
        boolean auxBoolean = radioConRepeticion.isSelected();
        boolean auxBoolean2 = radioEnteros.isSelected();

        //Carga un vector con la seleccion de los algoritmos y verifica que al menos haya uno
        seleccionMetodos[GestorCalcularEstadistica.BURBUJA]=checkBurbuja.isSelected();
        seleccionMetodos[GestorCalcularEstadistica.COMBSORT]=checkComb.isSelected();
        seleccionMetodos[GestorCalcularEstadistica.HEAPSORT]=checkHeap.isSelected();
        seleccionMetodos[GestorCalcularEstadistica.INSERCION]=checkInsercion.isSelected();
        seleccionMetodos[GestorCalcularEstadistica.QUICKSORT]=checkQuick.isSelected();
        seleccionMetodos[GestorCalcularEstadistica.SELECCION]=checkSeleccion.isSelected();
        seleccionMetodos[GestorCalcularEstadistica.SHELLSORT]=checkShell.isSelected();
        boolean eligioMetodos = checkBurbuja.isSelected()
                                || checkComb.isSelected()
                                || checkHeap.isSelected()
                                || checkInsercion.isSelected()
                                || checkQuick.isSelected()
                                || checkSeleccion.isSelected()
                                || checkShell.isSelected();
        
        if(eligioMetodos)
        {
            //Crea el gestor con la cantidad de elementos a ordenar, junto con el modo de ordenamiento
            GestorCalcularEstadistica gestor = new GestorCalcularEstadistica(auxInt, auxModo, auxBoolean, auxBoolean2);        
        
            //emite el informe
            gestor.generarInforme(seleccionMetodos,ventanaPrincipal);
        
            //destruye la ventana
            this.dispose();            
        }
        else
        {
            JOptionPane.showMessageDialog(this, new String("Ingrese al menos un algoritmo"));
        }
    }//GEN-LAST:event_botonCalcularActionPerformed
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCalcular;
    private javax.swing.JCheckBox checkBurbuja;
    private javax.swing.JCheckBox checkComb;
    private javax.swing.JCheckBox checkHeap;
    private javax.swing.JCheckBox checkInsercion;
    private javax.swing.JCheckBox checkQuick;
    private javax.swing.JCheckBox checkSeleccion;
    private javax.swing.JCheckBox checkShell;
    private javax.swing.ButtonGroup grupoElementos;
    private javax.swing.ButtonGroup grupoModo;
    private javax.swing.ButtonGroup grupoRepeticion;
    private javax.swing.JLabel labelCantidad;
    private javax.swing.JPanel panelAlgoritmos;
    private javax.swing.JPanel panelElementos;
    private javax.swing.JPanel panelModo;
    private javax.swing.JPanel panelRepeticion;
    private javax.swing.JRadioButton radioAleatorio;
    private javax.swing.JRadioButton radioConRepeticion;
    private javax.swing.JRadioButton radioEnteros;
    private javax.swing.JRadioButton radioObjetos;
    private javax.swing.JRadioButton radioOrdenado;
    private javax.swing.JRadioButton radioOrdenadoInv;
    private javax.swing.JRadioButton radioSinRepeticion;
    private javax.swing.JSpinner spinnerCantElementos;
    // End of variables declaration//GEN-END:variables
    
}
